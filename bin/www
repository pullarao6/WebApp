#!/usr/bin/env node
var http_app = require('../http-app');
var https_app = require('../https-app');
var config = require('./../utils/config');
var debug = require('debug')('myapp:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var database = require('../utils/database');
var logger = require('../utils/logger');

var http_port = normalizePort(process.env.PORT || config.http.port);
var https_port = normalizePort(process.env.PORT || config.https.port);
http_app.set('port', http_port);
https_app.set('port', https_port);
var options = {
	key : fs.readFileSync('./../trust-store/myapp.key'),
	cert : fs.readFileSync('./../trust-store/myapp.crt')
};

// Initialize DB connection
database.connect(function() {
	logger.info("Database Connection Successful");
	//HTTP Server
	http_server = http.createServer(http_app);
	http_server.listen(http_port,config.http.host);
	//HTTPS Server
	https_server = https.createServer(options, https_app);		
	https_server.listen(https_port,config.https.host);
	https_server.on('error', onError);
	https_server.on('listening', onListening);	
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		logger.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		logger.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		logger.error(error);
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = https_server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	logger.info('Listening on ' + bind);
}
